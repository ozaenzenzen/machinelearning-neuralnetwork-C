# -*- coding: utf-8 -*-
"""Prediksi Kebangkrutan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fxQ8sYWg_ykr_AH5kdIEUnLhPeZfSOCm
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import Library"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

"""Baca dataset"""

p = "/content/drive/MyDrive/Kuliah/Semester 6/UAS/Dataset/Company Bankruptcy Prediction/data.csv"
# p = "data.csv"
df = pd.read_csv(p)

"""Bagi dataset menjadi Kelas dan Fitur"""

#kelas
y = df.loc[:,['Bankrupt?']].values

#fitur
fitur = [" ROA(C) before interest and depreciation before interest",
       " ROA(A) before interest and % after tax",
       " ROA(B) before interest and depreciation after tax",
       " Operating Gross Margin", " Realized Sales Gross Margin",
       " Operating Profit Rate", " Pre-tax net Interest Rate",
       " After-tax net Interest Rate",
       " Non-industry income and expenditure/revenue",
       " Continuous interest rate (after tax)", " Operating Expense Rate",
       " Research and development expense rate", " Cash flow rate",
       " Interest-bearing debt interest rate", " Tax rate (A)",
       " Net Value Per Share (B)", " Net Value Per Share (A)",
       " Net Value Per Share (C)", " Persistent EPS in the Last Four Seasons",
       " Cash Flow Per Share", " Revenue Per Share (Yuan ¥)",
       " Operating Profit Per Share (Yuan ¥)",
       " Per Share Net profit before tax (Yuan ¥)",
       " Realized Sales Gross Profit Growth Rate",
       " Operating Profit Growth Rate", " After-tax Net Profit Growth Rate",
       " Regular Net Profit Growth Rate", " Continuous Net Profit Growth Rate",
       " Total Asset Growth Rate", " Net Value Growth Rate",
       " Total Asset Return Growth Rate Ratio", " Cash Reinvestment %",
       " Current Ratio", " Quick Ratio", " Interest Expense Ratio",
       " Total debt/Total net worth", " Debt ratio %", " Net worth/Assets",
       " Long-term fund suitability ratio (A)", " Borrowing dependency",
       " Contingent liabilities/Net worth",
       " Operating profit/Paid-in capital",
       " Net profit before tax/Paid-in capital",
       " Inventory and accounts receivable/Net value", " Total Asset Turnover",
       " Accounts Receivable Turnover", " Average Collection Days",
       " Inventory Turnover Rate (times)", " Fixed Assets Turnover Frequency",
       " Net Worth Turnover Rate (times)", " Revenue per person",
       " Operating profit per person", " Allocation rate per person",
       " Working Capital to Total Assets", " Quick Assets/Total Assets",
       " Current Assets/Total Assets", " Cash/Total Assets",
       " Quick Assets/Current Liability", " Cash/Current Liability",
       " Current Liability to Assets", " Operating Funds to Liability",
       " Inventory/Working Capital", " Inventory/Current Liability",
       " Current Liabilities/Liability", " Working Capital/Equity",
       " Current Liabilities/Equity", " Long-term Liability to Current Assets",
       " Retained Earnings to Total Assets", " Total income/Total expense",
       " Total expense/Assets", " Current Asset Turnover Rate",
       " Quick Asset Turnover Rate", " Working capitcal Turnover Rate",
       " Cash Turnover Rate", " Cash Flow to Sales", " Fixed Assets to Assets",
       " Current Liability to Liability", " Current Liability to Equity",
       " Equity to Long-term Liability", " Cash Flow to Total Assets",
       " Cash Flow to Liability", " CFO to Assets", " Cash Flow to Equity",
       " Current Liability to Current Assets", " Liability-Assets Flag",
       " Net Income to Total Assets", " Total assets to GNP price",
       " No-credit Interval", " Gross Profit to Sales",
       " Net Income to Stockholder's Equity", " Liability to Equity",
       " Degree of Financial Leverage (DFL)",
       " Interest Coverage Ratio (Interest expense to EBIT)",
       " Net Income Flag", " Equity to Liability"]

X = df.loc[:, fitur].values

"""Cek Missing Value"""

#cek missingvalue dataframe
df.isnull().sum().sum()
# df.isnull().sum()
# print(df.isnull().sum().sum())

"""Normalisasi"""

#normalisasi
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0, 1))
X = sc.fit_transform(X)

print(X)
X_dataframe = pd.DataFrame(X)
X_dataframe

"""Split Dataset menjadi data training dan data testing"""

#split data
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X, y,test_size=0.2) #80% training dan 20% testing

"""Proses PCA"""

# PCA
from sklearn.decomposition import PCA
pca = PCA(n_components=10)
X_train = pca.fit_transform(X_train)
X_test = pca.transform(X_test)

principalComponents = pca.fit_transform(X)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7', 'pc8', 'pc9', 'pc10'])

principalDf

var_pca = pca.explained_variance_ratio_

plt.xlabel('Number of Component / Features')
plt.ylabel('Variance')
plt.title('PCA Analysis')
plt.plot(var_pca)

"""Buat Model"""

#ANN
from sklearn.neural_network import MLPClassifier
clsf = MLPClassifier(activation='logistic',solver='lbfgs',alpha=1e-5,
                     hidden_layer_sizes=(64,32,32,16),random_state=0,max_iter=1000)
clsf.fit(X_train,y_train)

#akurasi
from sklearn.metrics import accuracy_score
ymodel = clsf.predict(X_train)
prediksi = clsf.predict(X_test)
print("Akurasi dengan MLP Classifier: ",accuracy_score(y_test,prediksi), "\n")

from sklearn.metrics import confusion_matrix, classification_report
print("Confusion Matrix: \n",confusion_matrix(y_test,prediksi), "\n")
print("Classificaiton Report: \n", classification_report(y_test,prediksi))

"""Dengan Library Tensorflow

Menggunakan Callback
"""

#buat kelas callback untuk mempercepat proses tuning
class myCallback(tf.keras.callbacks.Callback ):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.99):
      print("\nAkurasi telah mencapai >99%!")
      self.model.stop_training = True
callbacks = myCallback()

"""Buat Model (tensorflow)"""

import tensorflow as tf

model = tf.keras.models.Sequential([
                             tf.keras.layers.Dense(64, activation="relu"),
                             tf.keras.layers.Dense(32, activation="relu"),
                             tf.keras.layers.Dense(32, activation="relu"),
                             tf.keras.layers.Dense(16, activation="relu"),
                            #  tf.keras.layers.Dense(1),
                             tf.keras.layers.Dense(1, activation="sigmoid"),
])

model.compile(optimizer="Adam", loss='binary_crossentropy',metrics=['accuracy'])

"""Fit model"""

model.fit(X_train, y_train, 
          epochs=100, batch_size=128, 
          callbacks=[callbacks],
          verbose=1
          )

# ymodel = model.predict(X_train)
# prediksi = model.predict(X_test)

# # ymodel
# # prediksi

"""Evaluasi model dengan data test"""

error, accuracy = model.evaluate(X_test, y_test)
print("error: ", error)
print("accuracy: ", accuracy)